{"version":3,"sources":["../../libs/spin.js","spinnerhelper.js","panelizr.alert.js"],"names":["root","factory","exports","module","define","amd","Spinner","this","createEl","tag","prop","n","el","document","createElement","ins","parent","i","arguments","length","appendChild","addAnimation","alpha","trail","lines","name","join","start","z","Math","max","prefix","useCssAnimations","substring","indexOf","toLowerCase","pre","animations","sheet","insertRule","cssRules","vendor","pp","s","style","charAt","toUpperCase","slice","undefined","prefixes","css","merge","obj","def","getColor","color","idx","o","opts","defaults","initVML","vml","attr","addRule","prototype","grp","coordsize","coordorigin","r","width","height","seg","dx","filter","g","rotation","left","arcsize","corners","scale","radius","top","opacity","margin","position","shadow","val","c","firstChild","childNodes","rotate","direction","speed","fps","zIndex","className","hwaccel","spin","target","stop","self","insertBefore","setAttribute","f","ostep","astep","anim","j","timeout","setTimeout","clearTimeout","parentNode","removeChild","fill","background","boxShadow","transformOrigin","transform","borderRadius","animation","type","getElementsByTagName","styleSheet","probe","behavior","adj","jQuery","$","window","SpinnerHelper","element","options","$element","metadata","data","extend","_defaults","_name","pluginName","init","delay","spinOpts","plugin","spinner","isSpinning","timeoutID","$overlay","$centerer","append","_","_centerSpinner","isinwindow","topoutofbounds","inbounds","cssheight","csstop","elementoffset","offset","elementheight","outerHeight","elementbottom","docscrolltop","scrollTop","windowheight","docbottom","outerWidth","destroy","remove","removeData","fn","each","PanelizrAlert","hideSelector","showLoadingSpinner","isOpen","parentElement","hasClass","$parentPanelBody","closest","$hideMe","find","detach","insertAfter","hide","open","spinnerhelper","show","close"],"mappings":"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":"core/ef_plugins/panelizr.alert.js","sourcesContent":["/**\r\n * Copyright (c) 2011-2014 Felix Gnass\r\n * Licensed under the MIT license\r\n * http://spin.js.org/\r\n *\r\n * Example:\r\n    var opts = {\r\n      lines: 12,            // The number of lines to draw\r\n    , length: 7,            // The length of each line\r\n    , width: 5,             // The line thickness\r\n    , radius: 10            // The radius of the inner circle\r\n    , scale: 1.0            // Scales overall size of the spinner\r\n    , corners: 1            // Roundness (0..1)\r\n    , color: '#000'         // #rgb or #rrggbb\r\n    , opacity: 1/4          // Opacity of the lines\r\n    , rotate: 0             // Rotation offset\r\n    , direction: 1          // 1: clockwise, -1: counterclockwise\r\n    , speed: 1              // Rounds per second\r\n    , trail: 100            // Afterglow percentage\r\n    , fps: 20               // Frames per second when using setTimeout()\r\n    , zIndex: 2e9           // Use a high z-index by default\r\n    , className: 'spinner'  // CSS class to assign to the element\r\n    , top: '50%'            // center vertically\r\n    , left: '50%'           // center horizontally\r\n    , shadow: false         // Whether to render a shadow\r\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\r\n    , position: 'absolute'  // Element positioning\r\n    }\r\n    var target = document.getElementById('foo')\r\n    var spinner = new Spinner(opts).spin(target)\r\n */\r\n; (function (root, factory) {\r\n\r\n    /* CommonJS */\r\n    if (typeof exports == 'object') module.exports = factory()\r\n\r\n        /* AMD module */\r\n    else if (typeof define == 'function' && define.amd) define('libs/spin',factory)\r\n\r\n        /* Browser global */\r\n    else root.Spinner = factory()\r\n}(this, function () {\r\n    \"use strict\"\r\n\r\n    var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */\r\n      , animations = {} /* Animation rules keyed by their name */\r\n      , useCssAnimations /* Whether to use CSS animations or setTimeout */\r\n      , sheet /* A stylesheet to hold the @keyframe or VML rules. */\r\n\r\n    /**\r\n     * Utility function to create elements. If no tag name is given,\r\n     * a DIV is created. Optionally properties can be passed.\r\n     */\r\n    function createEl(tag, prop) {\r\n        var el = document.createElement(tag || 'div')\r\n          , n\r\n\r\n        for (n in prop) el[n] = prop[n]\r\n        return el\r\n    }\r\n\r\n    /**\r\n     * Appends children and returns the parent.\r\n     */\r\n    function ins(parent /* child1, child2, ...*/) {\r\n        for (var i = 1, n = arguments.length; i < n; i++) {\r\n            parent.appendChild(arguments[i])\r\n        }\r\n\r\n        return parent\r\n    }\r\n\r\n    /**\r\n     * Creates an opacity keyframe animation rule and returns its name.\r\n     * Since most mobile Webkits have timing issues with animation-delay,\r\n     * we create separate rules for each line/segment.\r\n     */\r\n    function addAnimation(alpha, trail, i, lines) {\r\n        var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')\r\n          , start = 0.01 + i / lines * 100\r\n          , z = Math.max(1 - (1 - alpha) / trail * (100 - start), alpha)\r\n          , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()\r\n          , pre = prefix && '-' + prefix + '-' || ''\r\n\r\n        if (!animations[name]) {\r\n            sheet.insertRule(\r\n              '@' + pre + 'keyframes ' + name + '{' +\r\n              '0%{opacity:' + z + '}' +\r\n              start + '%{opacity:' + alpha + '}' +\r\n              (start + 0.01) + '%{opacity:1}' +\r\n              (start + trail) % 100 + '%{opacity:' + alpha + '}' +\r\n              '100%{opacity:' + z + '}' +\r\n              '}', sheet.cssRules.length)\r\n\r\n            animations[name] = 1\r\n        }\r\n\r\n        return name\r\n    }\r\n\r\n    /**\r\n     * Tries various vendor prefixes and returns the first supported property.\r\n     */\r\n    function vendor(el, prop) {\r\n        var s = el.style\r\n          , pp\r\n          , i\r\n\r\n        prop = prop.charAt(0).toUpperCase() + prop.slice(1)\r\n        if (s[prop] !== undefined) return prop\r\n        for (i = 0; i < prefixes.length; i++) {\r\n            pp = prefixes[i] + prop\r\n            if (s[pp] !== undefined) return pp\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets multiple style properties at once.\r\n     */\r\n    function css(el, prop) {\r\n        for (var n in prop) {\r\n            el.style[vendor(el, n) || n] = prop[n]\r\n        }\r\n\r\n        return el\r\n    }\r\n\r\n    /**\r\n     * Fills in default values.\r\n     */\r\n    function merge(obj) {\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            var def = arguments[i]\r\n            for (var n in def) {\r\n                if (obj[n] === undefined) obj[n] = def[n]\r\n            }\r\n        }\r\n        return obj\r\n    }\r\n\r\n    /**\r\n     * Returns the line color from the given string or array.\r\n     */\r\n    function getColor(color, idx) {\r\n        return typeof color == 'string' ? color : color[idx % color.length]\r\n    }\r\n\r\n    // Built-in defaults\r\n\r\n    var defaults = {\r\n        lines: 12             // The number of lines to draw\r\n    , length: 7             // The length of each line\r\n    , width: 5              // The line thickness\r\n    , radius: 10            // The radius of the inner circle\r\n    , scale: 1.0            // Scales overall size of the spinner\r\n    , corners: 1            // Roundness (0..1)\r\n    , color: '#000'         // #rgb or #rrggbb\r\n    , opacity: 1 / 4          // Opacity of the lines\r\n    , rotate: 0             // Rotation offset\r\n    , direction: 1          // 1: clockwise, -1: counterclockwise\r\n    , speed: 1              // Rounds per second\r\n    , trail: 100            // Afterglow percentage\r\n    , fps: 20               // Frames per second when using setTimeout()\r\n    , zIndex: 2e9           // Use a high z-index by default\r\n    , className: 'spinner'  // CSS class to assign to the element\r\n    , top: '50%'            // center vertically\r\n    , left: '50%'           // center horizontally\r\n    , shadow: false         // Whether to render a shadow\r\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\r\n    , position: 'absolute'  // Element positioning\r\n    }\r\n\r\n    /** The constructor */\r\n    function Spinner(o) {\r\n        this.opts = merge(o || {}, Spinner.defaults, defaults)\r\n    }\r\n\r\n    // Global defaults that override the built-ins:\r\n    Spinner.defaults = {}\r\n\r\n    merge(Spinner.prototype, {\r\n        /**\r\n         * Adds the spinner to the given target element. If this instance is already\r\n         * spinning, it is automatically removed from its previous target by calling\r\n         * stop() internally.\r\n         */\r\n        spin: function (target) {\r\n            this.stop()\r\n\r\n            var self = this\r\n              , o = self.opts\r\n              , el = self.el = createEl(null, { className: o.className })\r\n\r\n            css(el, {\r\n                position: o.position\r\n            , width: 0\r\n            , zIndex: o.zIndex\r\n            , left: o.left\r\n            , top: o.top\r\n            })\r\n\r\n            if (target) {\r\n                target.insertBefore(el, target.firstChild || null)\r\n            }\r\n\r\n            el.setAttribute('role', 'progressbar')\r\n            self.lines(el, self.opts)\r\n\r\n            if (!useCssAnimations) {\r\n                // No CSS animation support, use setTimeout() instead\r\n                var i = 0\r\n                  , start = (o.lines - 1) * (1 - o.direction) / 2\r\n                  , alpha\r\n                  , fps = o.fps\r\n                  , f = fps / o.speed\r\n                  , ostep = (1 - o.opacity) / (f * o.trail / 100)\r\n                  , astep = f / o.lines\r\n\r\n                ; (function anim() {\r\n                    i++\r\n                    for (var j = 0; j < o.lines; j++) {\r\n                        alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)\r\n\r\n                        self.opacity(el, j * o.direction + start, alpha, o)\r\n                    }\r\n                    self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))\r\n                })()\r\n            }\r\n            return self\r\n        }\r\n\r\n        /**\r\n         * Stops and removes the Spinner.\r\n         */\r\n    , stop: function () {\r\n        var el = this.el\r\n        if (el) {\r\n            clearTimeout(this.timeout)\r\n            if (el.parentNode) el.parentNode.removeChild(el)\r\n            this.el = undefined\r\n        }\r\n        return this\r\n    }\r\n\r\n        /**\r\n         * Internal method that draws the individual lines. Will be overwritten\r\n         * in VML fallback mode below.\r\n         */\r\n    , lines: function (el, o) {\r\n        var i = 0\r\n          , start = (o.lines - 1) * (1 - o.direction) / 2\r\n          , seg\r\n\r\n        function fill(color, shadow) {\r\n            return css(createEl(), {\r\n                position: 'absolute'\r\n            , width: o.scale * (o.length + o.width) + 'px'\r\n            , height: o.scale * o.width + 'px'\r\n            , background: color\r\n            , boxShadow: shadow\r\n            , transformOrigin: 'left'\r\n            , transform: 'rotate(' + ~~(360 / o.lines * i + o.rotate) + 'deg) translate(' + o.scale * o.radius + 'px' + ',0)'\r\n            , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'\r\n            })\r\n        }\r\n\r\n        for (; i < o.lines; i++) {\r\n            seg = css(createEl(), {\r\n                position: 'absolute'\r\n            , top: 1 + ~(o.scale * o.width / 2) + 'px'\r\n            , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''\r\n            , opacity: o.opacity\r\n            , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\r\n            })\r\n\r\n            if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), { top: '2px' }))\r\n            ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))\r\n        }\r\n        return el\r\n    }\r\n\r\n        /**\r\n         * Internal method that adjusts the opacity of a single line.\r\n         * Will be overwritten in VML fallback mode below.\r\n         */\r\n    , opacity: function (el, i, val) {\r\n        if (i < el.childNodes.length) el.childNodes[i].style.opacity = val\r\n    }\r\n\r\n    })\r\n\r\n\r\n    function initVML() {\r\n\r\n        /* Utility function to create a VML tag */\r\n        function vml(tag, attr) {\r\n            return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)\r\n        }\r\n\r\n        // No CSS transforms but VML support, add a CSS rule for VML elements:\r\n        sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')\r\n\r\n        Spinner.prototype.lines = function (el, o) {\r\n            var r = o.scale * (o.length + o.width)\r\n              , s = o.scale * 2 * r\r\n\r\n            function grp() {\r\n                return css(\r\n                  vml('group', {\r\n                      coordsize: s + ' ' + s\r\n                  , coordorigin: -r + ' ' + -r\r\n                  })\r\n                , { width: s, height: s }\r\n                )\r\n            }\r\n\r\n            var margin = -(o.width + o.length) * o.scale * 2 + 'px'\r\n              , g = css(grp(), { position: 'absolute', top: margin, left: margin })\r\n              , i\r\n\r\n            function seg(i, dx, filter) {\r\n                ins(\r\n                  g\r\n                , ins(\r\n                    css(grp(), { rotation: 360 / o.lines * i + 'deg', left: ~~dx })\r\n                  , ins(\r\n                      css(\r\n                        vml('roundrect', { arcsize: o.corners })\r\n                      , {\r\n                          width: r\r\n                        , height: o.scale * o.width\r\n                        , left: o.scale * o.radius\r\n                        , top: -o.scale * o.width >> 1\r\n                        , filter: filter\r\n                      }\r\n                      )\r\n                    , vml('fill', { color: getColor(o.color, i), opacity: o.opacity })\r\n                    , vml('stroke', { opacity: 0 }) // transparent stroke to fix color bleeding upon opacity change\r\n                    )\r\n                  )\r\n                )\r\n            }\r\n\r\n            if (o.shadow)\r\n                for (i = 1; i <= o.lines; i++) {\r\n                    seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')\r\n                }\r\n\r\n            for (i = 1; i <= o.lines; i++) seg(i)\r\n            return ins(el, g)\r\n        }\r\n\r\n        Spinner.prototype.opacity = function (el, i, val, o) {\r\n            var c = el.firstChild\r\n            o = o.shadow && o.lines || 0\r\n            if (c && i + o < c.childNodes.length) {\r\n                c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild\r\n                if (c) c.opacity = val\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof document !== 'undefined') {\r\n        sheet = (function () {\r\n            var el = createEl('style', { type: 'text/css' })\r\n            ins(document.getElementsByTagName('head')[0], el)\r\n            return el.sheet || el.styleSheet\r\n        }())\r\n\r\n        var probe = css(createEl('group'), { behavior: 'url(#default#VML)' })\r\n\r\n        if (!vendor(probe, 'transform') && probe.adj) initVML()\r\n        else useCssAnimations = vendor(probe, 'animation')\r\n    }\r\n\r\n    return Spinner\r\n\r\n}));\n","/* \r\n * SPINNER HELPER = JQuery Wrapper around spin.js that also allows for an optional\r\n * overlay type of spinner that adds a div to cover the whole window.\r\n * \r\n * NOTE: Overlay\r\n */\r\n\r\n// storing our standard options here so they can be accessed globally\r\nvar opts = { lines: 11, width: 3 };\r\n\r\ndefine('core/ef_plugins/spinnerhelper',[\"jquery\", \"libs/spin\"], function (jQuery, Spinner) {\r\n    (function($, window, document, undefined) {\r\n\r\n        var pluginName = 'spinnerhelper',\r\n            defaults = {\r\n                type: \"inline\", // or \"overlay\"\r\n                delay: 500,\r\n                spinOpts: { lines: 11, width: 3, scale: .5}\r\n            };\r\n\r\n        // The actual plugin constructor\r\n        function SpinnerHelper(element, options) {\r\n            // grab the element the plugin was called on\r\n            this.element = element;\r\n\r\n            // also save the element as a jquery object\r\n            this.$element = $(element);\r\n\r\n            // get per-element inline configuration settings\r\n            this.metadata = this.$element.data('spinnerhelper-options');\r\n\r\n            // merge all the configs\r\n            this.options = $.extend({}, defaults, options, this.metadata);\r\n\r\n            // make sure type is set to \"inline\" or \"overlay\"\r\n            this.options.type = this.options.type.toLowerCase();\r\n            if (this.options.type !== \"inline\" && this.options.type !== \"overlay\") return;\r\n\r\n            // save the defaults\r\n            this._defaults = defaults;\r\n\r\n            // save the plugin name\r\n            this._name = pluginName;\r\n\r\n            // call init function\r\n            this.init();\r\n        }\r\n\r\n        // Define this sucker\r\n        SpinnerHelper.prototype = {\r\n            init: function() {\r\n                var plugin = this,\r\n                    $body = $('body'),\r\n                    $window = $(window);\r\n\r\n                plugin.spinner = new Spinner(plugin.options.spinOpts);\r\n                plugin.isSpinning = false;\r\n                plugin.timeoutID = -1; // -1 means that no timeout has been created or the timeout has been cleared.\r\n\r\n                if (plugin.options.type === \"overlay\") {\r\n                    plugin.$overlay = $('<div class=\"spinner-overlay\"></div>').css('display', 'none');\r\n                    plugin.$centerer = $('<div class=\"spinner-centerer\"></div>');\r\n                    plugin.$element.append(plugin.$overlay.append(plugin.$centerer));\r\n                }\r\n\r\n                plugin.start();\r\n            },\r\n\r\n            // stop the spinner\r\n            stop: function() {\r\n                var plugin = this,\r\n                    $body = $('body'),\r\n                    $window = $(window);\r\n\r\n                if (!plugin.isSpinning) {\r\n                    // cancel the timeout\r\n                    clearTimeout(plugin.timeoutID);\r\n                    plugin.timeoutID = -1;\r\n                    return;\r\n                }\r\n\r\n                // handle the two different types\r\n                switch (plugin.options.type) {\r\n                case \"inline\":\r\n                    plugin.spinner.stop();\r\n                    plugin.isSpinning = false;\r\n                    break;\r\n                case \"overlay\":\r\n                    plugin.spinner.stop();\r\n                    plugin.$overlay.css('display', 'none');\r\n                    plugin.isSpinning = false;\r\n                    break;\r\n                }\r\n            },\r\n\r\n            // start the spinner\r\n            start: function() {\r\n                var plugin = this,\r\n                    $body = $('body'),\r\n                    $window = $(window);\r\n\r\n                // if this is already spinning, exit the function\r\n                if (plugin.isSpinning) return;\r\n\r\n                switch (plugin.options.type) {\r\n                case \"inline\":\r\n                    plugin.timeoutID = _.delay(function() {\r\n                        plugin.spinner.spin(plugin.element);\r\n                        plugin.isSpinning = true;\r\n                    }, plugin.options.delay);\r\n                    break;\r\n                case \"overlay\":\r\n                    plugin.timeoutID = _.delay(function() {\r\n                        plugin.$overlay.css('display', 'block');\r\n                        plugin._centerSpinner();\r\n                        plugin.spinner.spin(plugin.$centerer[0]);\r\n                        plugin.isSpinning = true;\r\n                    }, plugin.options.delay);\r\n                    break;\r\n                }\r\n            },\r\n\r\n            _centerSpinner: function() {\r\n                var plugin = this,\r\n                    elementoffset = plugin.$element.offset().top,\r\n                    elementheight = plugin.$element.outerHeight(false),\r\n                    elementbottom = elementoffset + elementheight,\r\n                    docscrolltop = $(document).scrollTop(),\r\n                    windowheight = $(window).height(),\r\n                    docbottom = docscrolltop + windowheight,\r\n                    isinwindow,\r\n                    topoutofbounds,\r\n                    inbounds,\r\n                    cssheight,\r\n                    csstop;\r\n\r\n                // make sure that some portion of the element is inside the window\r\n                isinwindow = elementoffset < docbottom && elementbottom > docscrolltop;\r\n\r\n                // if the element isn't in view, just center the spinner in the whole element\r\n                if (!isinwindow) {\r\n                    cssheight = elementheight;\r\n                    csstop = 0;\r\n                } else {\r\n                    // some part of the element is visible\r\n                    // calculate what part of the top of the element is above the window\r\n                    topoutofbounds = docscrolltop - elementoffset;\r\n\r\n                    if (topoutofbounds >= 0) {\r\n                        // *the top of the element is above the window or just at the top of the window*\r\n\r\n                        // position the top of the centerer relative to its parent\r\n                        csstop = topoutofbounds;\r\n\r\n                        // calculate how much of the element is visible\r\n                        inbounds = elementheight - topoutofbounds;\r\n\r\n                        // if part of the element goes below the window, shorten the centerer to fit in the window\r\n                        cssheight = inbounds > windowheight ? windowheight : inbounds;\r\n                    } else {\r\n                        // *negative number means the top of the element is inside the window, \r\n                        // and -topoutofbounds == the element's offset from the top of the window*\r\n\r\n                        // position the top of the centerer at the top of the element\r\n                        csstop = 0;\r\n\r\n                        // calculate how much of the element is visible in the window\r\n                        inbounds = windowheight + topoutofbounds; // topoutofbounds is negative so this actually subtracts\r\n\r\n                        // if the entire element is visible in the screen\r\n                        cssheight = inbounds > elementheight ? elementheight : inbounds;\r\n                    }\r\n                }\r\n\r\n                // set the centerer css!\r\n                plugin.$centerer.css({ 'width': plugin.$element.outerWidth(), 'height': cssheight, 'position': 'relative', 'top': csstop });\r\n\r\n            },\r\n\r\n            destroy: function() {\r\n                var plugin = this;\r\n                plugin.stop();\r\n\r\n                if (plugin.options.type === \"overlay\") {\r\n                    plugin.$overlay.remove();\r\n                }\r\n\r\n                plugin.$element.removeData('plugin_' + pluginName);\r\n                return null;\r\n            }\r\n\r\n        };\r\n\r\n        // Turn this into a jquery plugin & prevent multiple instantiations\r\n        $.fn[pluginName] = function(options) {\r\n            return this.each(function() {\r\n                if (!$.data(this, 'plugin_' + pluginName)) {\r\n                    $.data(this, 'plugin_' + pluginName,\r\n                        new SpinnerHelper(this, options)); // CHANGE: Plugin to plugin constructor defined above\r\n                }\r\n            });\r\n        }\r\n\r\n    })(jQuery, window, document);\r\n});\n","/* \r\n * PANELIZR ALERT\r\n * very very very simple code to display an alert that takes over the content of a panelizr panel\r\n * ASSUMES YOU ARE IN A PANELIZR PANEL, DOES NOT WORK OUTSIDE OF PANELIZR\r\n * Only set up so far to handle in-page static content.\r\n */\r\n\r\n\r\n; define('core/ef_plugins/panelizr.alert',[\"jquery\", \"underscore\", \"core/ef_plugins/spinnerhelper\"], function (jQuery) {\r\n\r\n    (function ($, window, document, undefined) {\r\n\r\n        var pluginName = 'panelizralert',\r\n            defaults = {\r\n                hideSelector: '', // REQUIRED - selector of child element of panelizr body to hide when this is shown\r\n                showLoadingSpinner: true // show a loading spinner when loading\r\n            };\r\n\r\n        // The actual plugin constructor\r\n        function PanelizrAlert(element, options) {\r\n            // grab the element the plugin was called on\r\n            this.element = element;\r\n\r\n            // also save the element as a jquery object\r\n            this.$element = $(element);\r\n\r\n            // get per-element inline configuration settings\r\n            this.metadata = this.$element.data('panelizralert-options');\r\n\r\n            // merge all the configs\r\n            this.options = $.extend({}, defaults, options, this.metadata);\r\n\r\n            // save the defaults\r\n            this._defaults = defaults;\r\n\r\n            // save the plugin name\r\n            this._name = pluginName;\r\n\r\n            // call init function\r\n            this.init();\r\n        }\r\n\r\n        // Define this sucker\r\n        PanelizrAlert.prototype = {\r\n            init: function () {\r\n                var plugin = this;\r\n\r\n                // set open flag\r\n                plugin.isOpen = false;\r\n\r\n                // get parent panel\r\n\n                if ($(this.element.parentElement).hasClass('cta-body')) {\r\n                    plugin.$parentPanelBody = plugin.$element.closest('.cta-body');\r\n                } else {\r\n                    plugin.$parentPanelBody = plugin.$element.closest('.panel-body');\r\n                }\r\n\r\n                // get the element to hide\r\n                plugin.$hideMe = plugin.$parentPanelBody.find(plugin.options.hideSelector);\r\n\r\n                // make sure that the alert is outside of the hidden element\r\n                plugin.$element.detach();\r\n                plugin.$element.insertAfter(plugin.$hideMe).hide();\r\n            },\r\n\r\n            open: function () {\r\n                // re-reference the plugin to avoid this conflicts\r\n                var plugin = this;\r\n\r\n                // exit if this is already open\r\n                if (plugin.isOpen) return;\r\n\r\n                if (plugin.options.showLoadingSpinner) {\r\n                    plugin.spinner = plugin.$parentPanelBody.spinnerhelper({ 'type': 'overlay', 'delay': 0 }).data('plugin_spinnerhelper');\r\n\r\n                    _.delay(function () {\r\n                        plugin.spinner.stop();\r\n                        plugin.$hideMe.hide();\r\n                        plugin.$element.show();\r\n                    }, 500);\r\n                } else {\r\n                    plugin.$hideMe.hide();\r\n                    plugin.$element.show();\r\n                }\r\n\r\n                plugin.isOpen = true;\r\n\r\n            },\r\n\r\n            close: function () {\r\n                // re-reference the plugin to avoid this conflicts\r\n                var plugin = this;\r\n\r\n                // exit if this isn't already open\r\n                if (!plugin.isOpen) return;\r\n\r\n                plugin.$element.hide();\r\n                plugin.$hideMe.show();\r\n\r\n                plugin.isOpen = false;\r\n            }\r\n        };\r\n\r\n        // Turn this into a jquery plugin & prevent multiple instantiations\r\n        $.fn[pluginName] = function (options) {\r\n            return this.each(function () {\r\n                if (!$.data(this, 'plugin_' + pluginName)) {\r\n                    $.data(this, 'plugin_' + pluginName,\r\n                        new PanelizrAlert(this, options));\r\n                }\r\n            });\r\n        }\r\n\r\n    })(jQuery, window, document);\r\n});\n"]}