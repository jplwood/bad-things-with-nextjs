{"version":3,"sources":["truncatr.js"],"names":["define","jQuery","$","window","document","undefined","Truncatr","element","options","this","$element","metadata","data","extend","defaults","_defaults","_name","pluginName","init","maxLength","fullWrapper","excerptWrapper","ending","prototype","$children","plugin","$el","children","not","detach","_wrapTextWithP","_sanitize","text","length","destroy","$excerpt","append","_createExcerpt","$full","html","truncate","origText","max","newText","separator","punctuation","indexOfLastSeparator","substring","lastIndexOf","slice","i","charAt","find","first","each","$this","trim","remove","wrapInner","contents","filter","nodeType","wrap","end","removeData","fn"],"mappings":"AAAA,AAWAA,OAAA,4BAAA,UAAA,SAAAC,IACA,SAAAC,EAAAC,EAAAC,EAAAC,GAWA,QAAAC,GAAAC,EAAAC,GACAC,KAAAF,QAAAA,EACAE,KAAAC,SAAAR,EAAAK,GAEAE,KAAAE,SAAAF,KAAAC,SAAAE,KAAA,oBACAH,KAAAD,QAAAN,EAAAW,UAAAC,EAAAN,EAAAC,KAAAE,UACAF,KAAAM,UAAAD,EAEAL,KAAAO,MAAAC,EACAR,KAAAS,OAlBA,GAAAD,GAAA,WACAH,GACAK,UAAA,GACAC,YAAA,gCACAC,eAAA,mCACAC,OAAA,MAgBAhB,GAAAiB,WACAL,KAAA,WACA,GAEAM,GAFAC,EAAAhB,KACAiB,EAAAD,EAAAf,QAQA,OALAc,GAAAE,EAAAC,WAAAC,IAAA,SAAAC,SAEAJ,EAAAK,eAAAJ,GACAD,EAAAM,UAAAL,GAEAA,EAAAM,OAAAC,QAAAR,EAAAjB,QAAAW,cAEAM,GAAAS,WAGAT,EAAAU,SAAAjC,EAAAuB,EAAAjB,QAAAa,gBAAAe,OAAAX,EAAAY,eAAAX,IACAD,EAAAa,MAAApC,EAAAuB,EAAAjB,QAAAY,aAAAgB,OAAAV,EAAAC,gBAEAD,GAAAa,KAAA,IAAAH,OAAAX,EAAAa,MAAAb,EAAAU,SAAAX,KAGAgB,SAAA,SAAAC,EAAAC,EAAApB,GACA,GAAAqB,GAAA,GACAC,EAAA,IACAC,GAAA,IAAA,IAAA,IAAA,KACAC,EAAA,EACA,IAAA,IAAAJ,EACA,MAAA,EAEA,IAAAD,EAAAR,QAAAS,EAEA,MAAAD,EAEAE,GAAAF,EAAAM,UAAA,EAAAL,EAAApB,EAAAW,QACAa,EAAAH,EAAAK,YAAAJ,GACA,KAAAE,IACAH,EAAAA,EAAAM,MAAA,EAAAH,GAIA,KAAA,GAAAI,GAAA,EAAAA,EAAAL,EAAAZ,OAAAiB,IACA,GAAAP,EAAAQ,OAAAR,EAAAV,OAAA,KAAAY,EAAAK,GAAA,CACAP,EAAAA,EAAAI,UAAA,EAAAJ,EAAAV,OAAA,EACA,OAIA,MADAU,IAAArB,GAIAe,eAAA,SAAAX,GACA,GAAAD,GAAAhB,KACAgC,EAAAf,EAAA0B,KAAA,KAAAC,QAAArB,OACAG,EAAAjC,EAAA,QAIA,OAAAiC,GAAAH,KAAAP,EAAAe,SAAAC,EAAAhB,EAAAjB,QAAAW,UAAAM,EAAAjB,QAAAc,UAGAS,UAAA,SAAAL,GACAA,EAAA0B,KAAA,KAAAE,KAAA,WACA,GAAAC,GAAArD,EAAAO,MACAuB,EAAA9B,EAAAsD,KAAAD,EAAAhB,SACA,KAAAP,GAAA,WAAAA,IACAuB,EAAAE,YAKA3B,eAAA,SAAAJ,GAEA,MAAA,KAAAA,EAAAC,WAAAM,QACAP,EAAAgC,UAAA,UACA,GAGA,IAAAhC,EAAAC,WAAAC,IAAA,MAAAK,QAGAP,EAAAiC,WAAAC,OAAA,WAAA,MAAA,KAAAnD,KAAAoD,WACAC,KAAA,SAAAC,MACAH,OAAA,MAAAH,UACA,IAEA,GAGAvB,QAAA,WACA,GAAAT,GAAAhB,IAEAgB,GAAAf,SAAAsD,WAAA,UAAA/C,KAMAf,EAAA+D,GAAAhD,GAAA,SAAAT,GACA,MAAAC,MAAA6C,KAAA,WACApD,EAAAU,KAAAH,KAAA,UAAAQ,IACAffile":"core/ef_plugins/truncatr.js","sourcesContent":["/* \r\n * TRUNCATR\r\n * truncation as progressive enhancement\r\n * =====================================\r\n *\r\n * Given an element containing text, truncatr will create a full text element and\r\n * an excerpt element. You can then show one and hide the other as you'd like.\r\n * Because we're doing truncation on the client and not the server, browsers\r\n * that haven't loaded the JS yet will see the full text.\r\n */ \r\n\r\n; define('core/ef_plugins/truncatr',[\"jquery\"], function (jQuery) {\r\n    (function ($, window, document, undefined) {\r\n\r\n        var pluginName = 'truncatr',\r\n            defaults = {\r\n                maxLength: 85, // Max length of excerpt, in chars. Breaks at word.\r\n                fullWrapper: '<div class=\"truncatr-full\" />', // We're using \"quick-closing\" tags: http://api.jquery.com/jQuery/#jQuery2\r\n                excerptWrapper: '<div class=\"truncatr-excerpt\" />',\r\n                ending: '...', // Text to be added to the end of the excerpt.\r\n            };\r\n\r\n        // ReSharper disable once InconsistentNaming\r\n        function Truncatr(element, options) {\r\n            this.element = element;\r\n            this.$element = $(element);\r\n\r\n            this.metadata = this.$element.data('truncatr-options');\r\n            this.options = $.extend({}, defaults, options, this.metadata);\r\n            this._defaults = defaults;\r\n\r\n            this._name = pluginName;\r\n            this.init();\r\n        }\r\n\r\n        Truncatr.prototype = {\r\n            init: function () {\r\n                var plugin = this,\r\n                    $el = plugin.$element,\r\n                    $children;\r\n                // Temporarily detach children so we don't overwrite them.\r\n                $children = $el.children().not('br, p').detach();\r\n                // Clean up HTML.\r\n                plugin._wrapTextWithP($el);\r\n                plugin._sanitize($el);\r\n                // Create the excerpt and full text objects.\r\n                if ($el.text().length <= plugin.options.maxLength) {\r\n                    // Text isn't long enough for an excerpt. Abort!\r\n                    plugin.destroy();\r\n                    return;\r\n                }\r\n                plugin.$excerpt = $(plugin.options.excerptWrapper).append(plugin._createExcerpt($el));\r\n                plugin.$full = $(plugin.options.fullWrapper).append($el.children());\r\n                // Clear out the element. Append the excerpt and full text. Re-attach the children.\r\n                $el.html('').append(plugin.$full, plugin.$excerpt, $children);\r\n            },\r\n\r\n            truncate: function (origText, max, ending) {\r\n                var newText = '',\r\n                    separator = ' ',\r\n                    punctuation = [',', '.', '!', '?'],\r\n                    indexOfLastSeparator = -1;\r\n                if (max === 0) {\r\n                    return '';\r\n                }\r\n                if (origText.length <= max) {\r\n                    // Text is already under max and doesn't need to be truncated.\r\n                    return origText;\r\n                }\r\n                newText = origText.substring(0, max - ending.length);\r\n                indexOfLastSeparator = newText.lastIndexOf(separator);\r\n                if (indexOfLastSeparator !== -1) {\r\n                    newText = newText.slice(0, indexOfLastSeparator);\r\n                    // If there are no spaces, just cut the text off at the max.\r\n                }\r\n                // If new text ends with punctuation, remove it.\r\n                for (var i = 0; i < punctuation.length; i++) {\r\n                    if (newText.charAt(newText.length - 1) === punctuation[i]) {\r\n                        newText = newText.substring(0, newText.length - 1);\r\n                        break;\r\n                    }\r\n                }\r\n                newText += ending;\r\n                return newText;\r\n            },\r\n\r\n            _createExcerpt: function ($el) {\r\n                var plugin = this,\r\n                    origText = $el.find('p').first().text(),\r\n                    $excerpt = $('<p />');\r\n                // We're grabbing just text from the first paragraph. If that\r\n                // paragraph's text is under the max, we'll show the entire\r\n                // paragraph in the excerpt, but not subsequent paragraphs.\r\n                return $excerpt.text(plugin.truncate(origText, plugin.options.maxLength, plugin.options.ending));\r\n            },\r\n\r\n            _sanitize: function ($el) {\r\n                $el.find('p').each(function () {\r\n                    var $this = $(this),\r\n                        text = $.trim($this.html());\r\n                    if (text === '' || text === '&nbsp;') { // Sigh.\r\n                        $this.remove();\r\n                    }\r\n                });\r\n            },\r\n\r\n            _wrapTextWithP: function ($el) {\r\n                // Wrap the text nodes inside $elem with p so that we can maniuplate them.\r\n                if ($el.children().length === 0) {\r\n                    $el.wrapInner('<p />');\r\n                    return true;\r\n                }\r\n\r\n                if ($el.children().not('br').length === 0) {\r\n                    // Wrap each text node with paragraph tags, then remove the <br> tags.\r\n                    // Based on an example from http://api.jquery.com/contents/\r\n                    $el.contents().filter(function () { return this.nodeType === 3; })\r\n                        .wrap('<p />').end()\r\n                        .filter('br').remove();\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n\r\n            destroy: function () {\r\n                var plugin = this;\r\n                // remove the data\r\n                plugin.$element.removeData('plugin_' + pluginName);\r\n            }\r\n\r\n        };\r\n\r\n        // Turn this into a jquery plugin & prevent multiple instantiations\r\n        $.fn[pluginName] = function (options) {\r\n            return this.each(function () {\r\n                if (!$.data(this, 'plugin_' + pluginName)) {\r\n                    $.data(this, 'plugin_' + pluginName,\r\n                        new Truncatr(this, options));\r\n                }\r\n            });\r\n        }\r\n\r\n    })(jQuery, window, document);\r\n});\n"]}