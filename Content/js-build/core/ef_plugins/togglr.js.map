{"version":3,"sources":["togglr.js"],"names":["define","jQuery","$","window","document","undefined","Togglr","element","options","this","$element","metadata","activeText","data","inactiveText","extend","defaults","_defaults","_name","pluginName","init","toggleText","activeClass","prototype","plugin","$radios","$input","_active","tagName","attr","length","Error","on","_update","event","preventDefault","toggle","isActive","active","is","prop","newText","addClass","trigger","removeClass","text","destroy","removeData","off","fn","each"],"mappings":"AAAA,AAeAA,OAAA,0BAAA,UAAA,SAAAC,IACA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,YAUA,SAAAC,GAAAC,EAAAC,GACAC,KAAAF,QAAAA,EACAE,KAAAC,SAAAR,EAAAK,GAIAE,KAAAE,UACAC,WAAAH,KAAAC,SAAAG,KAAA,sBACAC,aAAAL,KAAAC,SAAAG,KAAA,yBAEAJ,KAAAD,QAAAN,EAAAa,UAAAC,EAAAR,EAAAC,KAAAE,UACAF,KAAAQ,UAAAD,EACAP,KAAAS,MAAAC,EACAV,KAAAW,OAtBA,GAAAD,GAAA,SACAH,GACAJ,WAAA,OACAE,aAAA,OACAO,YAAA,EACAC,YAAA,YAoBAhB,GAAAiB,WACAH,KAAA,WACA,GAAAI,GAAAf,IAKA,IAJAe,EAAAC,QAAAvB,IACAsB,EAAAE,OAAAxB,IACAsB,EAAAG,SAAA,EAEA,UAAAH,EAAAjB,QAAAqB,QAAA,CAIA,GADAJ,EAAAE,OAAAxB,EAAA,IAAAsB,EAAAd,SAAAmB,KAAA,QACA,IAAAL,EAAAE,OAAAI,OACA,KAAA,IAAAC,OAAA,yEAEA,IAAA,aAAAP,EAAAE,OAAAG,KAAA,QACAL,EAAAE,OAAAM,GAAA,gBAAA,WACAR,EAAAS,gBAEA,CAAA,GAAA,UAAAT,EAAAE,OAAAG,KAAA,QASA,KAAA,IAAAE,OAAA,wDAPA,IADAP,EAAAC,QAAAvB,EAAA,cAAAsB,EAAAE,OAAAG,KAAA,QAAA,MACAL,EAAAhB,QAAAkB,OAAAG,KAAA,QACA,KAAA,IAAAE,OAAA,oDAEAP,GAAAC,QAAAO,GAAA,gBAAA,WACAR,EAAAS,iBAQAT,GAAAd,SAAAsB,GAAA,eAAA,SAAAE,GACAA,EAAAC,iBACAX,EAAAY,UAMA,OADAZ,GAAAS,SAAA,IACA,GAGAI,SAAA,WACA,GACAC,GADAd,EAAAf,IAOA,OAJA6B,GADA,IAAAd,EAAAE,OAAAI,OACAN,EAAAE,OAAAa,GAAA,YAEAf,EAAAG,SAKAS,OAAA,WACA,GAAAZ,GAAAf,IACA,KAAAe,EAAAE,OAAAI,OACAN,EAAAhB,QAAAgC,KAAA,WAAAhB,EAAAa,YAEAb,EAAAG,SAAAH,EAAAG,QAEAH,EAAAS,WAGAA,QAAA,WACA,GAAAT,GAAAf,KACAgC,EAAA,EAEAjB,GAAAa,YACAb,EAAAd,SAAAgC,SAAAlB,EAAAhB,QAAAc,aACAmB,EAAAjB,EAAAhB,QAAAI,WACAY,EAAAd,SAAAiC,QAAA,qBAEAnB,EAAAd,SAAAkC,YAAApB,EAAAhB,QAAAc,aACAmB,EAAAjB,EAAAhB,QAAAM,aACAU,EAAAd,SAAAiC,QAAA,sBAGAnB,EAAAhB,QAAAa,YACAG,EAAAd,SAAAmC,KAAAJ,IAIAK,QAAA,WACA,GAAAtB,GAAAf,KACAa,EAAAE,EAAAhB,QAAAc,WAEAE,GAAAd,SAAAqC,WAAA,UAAA5B,GAEAK,EAAAE,OAAAsB,IAAA,iBACAxB,EAAAC,QAAAuB,IAAA,iBACAxB,EAAAd,SAAAsC,IAAA,gBACAxB,EAAAd,SAAAkC,YAAAtB,KAMApB,EAAA+C,GAAA9B,GAAA,SAAAX,GACA,MAAAC,MAAAyC,KAAA,WACAhD,EAAAW,KAAAJ,KAAA,UAAAU,IACAjB,EAAAW,KAAAJ,KAAA,UAAAU,EACA,GAAAb,GAAAG,KAAAD,QAKAP,EAAAE,OAAAC;AArfile":"core/ef_plugins/togglr.js","sourcesContent":["/* \r\n * TOGGLR\r\n * a plugin for toggling things\r\n * ============================\r\n *\r\n * When the user clicks an element, Togglr will update the text on the\r\n * element and toggle an \"active\" class. If the element is a label for\r\n * a radio button or checkbox, Togglr will also toggle the value of\r\n * that radio button or checkbox.\r\n * \r\n * Other plugins can hook into the togglr-activate and togglr-deactivate\r\n * events.\r\n *\r\n */\r\n\r\n; define('core/ef_plugins/togglr',[\"jquery\"], function (jQuery) {\r\n    (function ($, window, document, undefined) {\r\n        \"use strict\";\r\n        var pluginName = 'togglr',\r\n            defaults = {\r\n                activeText: 'less',\r\n                inactiveText: 'more',\r\n                toggleText: true, // Toggle between the active text and inactive when the trigger is clicked?              \r\n                activeClass: 'is-active' // Class applied to the element when togglr is active.\r\n            };\r\n\r\n        // ReSharper disable once InconsistentNaming\r\n        function Togglr(element, options) {\r\n            this.element = element;\r\n            this.$element = $(element);\r\n\r\n            // We're not following the usual data-plugin-options attribute here because in some of our views,\r\n            // it's not possible to generate JSON in the required format.\r\n            this.metadata = {\r\n                activeText: this.$element.data('togglr-active-text'),\r\n                inactiveText: this.$element.data('togglr-inactive-text'),\r\n            };\r\n            this.options = $.extend({}, defaults, options, this.metadata);\r\n            this._defaults = defaults;\r\n            this._name = pluginName;\r\n            this.init();\r\n        }\r\n\r\n        Togglr.prototype = {\r\n            init: function () {\r\n                var plugin = this;\r\n                plugin.$radios = $(); // If plugin.options.input is a radio button, store all the radio buttons with the same name attribute.\r\n                plugin.$input = $();\r\n                plugin._active = false; // Set inactive state as default. External JS should check isActive(), not _active.\r\n\r\n                if (plugin.element.tagName === 'LABEL') {\r\n                    /* If the element is a label, the open/close state is stored in the\r\n                    ** associated input's \"checked\" attribute. */\r\n                    plugin.$input = $('#' + plugin.$element.attr('for'));\r\n                    if (plugin.$input.length === 0) {\r\n                        throw new Error(\"Togglr: The label must have a 'for' attribute and an associated input.\");\r\n                    }\r\n                    if (plugin.$input.attr('type') === 'checkbox') {\r\n                        plugin.$input.on('change.togglr', function () {\r\n                            plugin._update();\r\n                        });\r\n                    } else if (plugin.$input.attr('type') === 'radio') {\r\n                        plugin.$radios = $('input[name=' + plugin.$input.attr('name') + ']');\r\n                        if (!plugin.options.$input.attr('name')) {\r\n                            throw new Error(\"Togglr: Radio inputs must have 'name' attributes.\");\r\n                        }\r\n                        plugin.$radios.on('change.togglr', function () {\r\n                            plugin._update();\r\n                        });\r\n                    } else {\r\n                        throw new Error(\"Togglr: Only checkbox and radio inputs are supported.\");\r\n                    }\r\n\r\n                } else {\r\n                    // If the trigger is not a label, the open/close state is stored in a variable.\r\n                    plugin.$element.on('click.togglr', function (event) {\r\n                        event.preventDefault();\r\n                        plugin.toggle();\r\n                    });\r\n                }\r\n\r\n                // Also update on init in case the trigger text in the HTML isn't right.\r\n                plugin._update(true);\r\n                return true; // Init was successful!\r\n            },\r\n\r\n            isActive: function () {\r\n                var plugin = this,\r\n                    active;\r\n                if (plugin.$input.length === 1) {\r\n                    active = plugin.$input.is(':checked');\r\n                } else {\r\n                    active = plugin._active;\r\n                }\r\n                return active;\r\n            },\r\n\r\n            toggle: function() {\r\n                var plugin = this;\r\n                if (plugin.$input.length === 1) {\r\n                    plugin.options.prop('checked', !plugin.isActive());\r\n                } else {\r\n                    plugin._active = !plugin._active;\r\n                }\r\n                plugin._update();\r\n            },\r\n\r\n            _update: function () {\r\n                var plugin = this,\r\n                    newText = '';\r\n\r\n                if (plugin.isActive()) {\r\n                    plugin.$element.addClass(plugin.options.activeClass);\r\n                    newText = plugin.options.activeText;\r\n                    plugin.$element.trigger('togglr-activate');\r\n                } else {\r\n                    plugin.$element.removeClass(plugin.options.activeClass);\r\n                    newText = plugin.options.inactiveText;\r\n                    plugin.$element.trigger('togglr-deactivate');\r\n                }\r\n                \r\n                if (plugin.options.toggleText) {\r\n                   plugin.$element.text(newText);\r\n                }\r\n            },\r\n\r\n            destroy: function () {\r\n                var plugin = this,\r\n                    activeClass = plugin.options.activeClass;\r\n                // Remove the data\r\n                plugin.$element.removeData('plugin_' + pluginName);\r\n                // Unbind listeners\r\n                plugin.$input.off('change.togglr');\r\n                plugin.$radios.off('change.togglr');\r\n                plugin.$element.off('click.togglr');\r\n                plugin.$element.removeClass(activeClass);\r\n            }\r\n\r\n        };\r\n\r\n        // Turn this into a jquery plugin & prevent multiple instantiations\r\n        $.fn[pluginName] = function (options) {\r\n            return this.each(function () {\r\n                if (!$.data(this, 'plugin_' + pluginName)) {\r\n                    $.data(this, 'plugin_' + pluginName,\r\n                        new Togglr(this, options));\r\n                }\r\n            });\r\n        };\r\n\r\n    })(jQuery, window, document);\r\n});\n"]}