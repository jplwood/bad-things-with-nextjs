{"version":3,"sources":["../../libs/flux.js","../../secure/AppDispatcher.js","form-actions.js"],"names":["e","exports","module","define","amd","f","window","global","self","Flux","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"Dispatcher","./lib/Dispatcher",2,"this","_callbacks","_isPending","_isHandled","_isDispatching","_pendingPayload","invariant","_lastID","_prefix","prototype","register","callback","id","unregister","waitFor","ids","ii","_invokeCallback","dispatch","payload","_startDispatching","_stopDispatching","isDispatching","./invariant",3,"condition","format","b","c","d","error","undefined","args","argIndex","replace","framesToPop","root","factory","AppDispatcher","handleViewAction","action","source","FormStore","EventEmitter","FormActions","validate","actionType"],"mappings":"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","file":"core/global/form-actions.js","sourcesContent":["!function (e) { if (\"object\" == typeof exports && \"undefined\" != typeof module) module.exports = e(); else if (\"function\" == typeof define && define.amd) define('libs/flux',[], e); else { var f; \"undefined\" != typeof window ? f = window : \"undefined\" != typeof global ? f = global : \"undefined\" != typeof self && (f = self), f.Flux = e() } }(function () {\r\n    var define, module, exports; return (function e(t, n, r) { function s(o, u) { if (!n[o]) { if (!t[o]) { var a = typeof require == \"function\" && require; if (!u && a) return a(o, !0); if (i) return i(o, !0); var f = new Error(\"Cannot find module '\" + o + \"'\"); throw f.code = \"MODULE_NOT_FOUND\", f } var l = n[o] = { exports: {} }; t[o][0].call(l.exports, function (e) { var n = t[o][1][e]; return s(n ? n : e) }, l, l.exports, e, t, n, r) } return n[o].exports } var i = typeof require == \"function\" && require; for (var o = 0; o < r.length; o++) s(r[o]); return s })({\r\n        1: [function (require, module, exports) {\r\n            /**\r\n             * Copyright (c) 2014, Facebook, Inc.\r\n             * All rights reserved.\r\n             *\r\n             * This source code is licensed under the BSD-style license found in the\r\n             * LICENSE file in the root directory of this source tree. An additional grant\r\n             * of patent rights can be found in the PATENTS file in the same directory.\r\n             */\r\n\r\n            module.exports.Dispatcher = require('./lib/Dispatcher')\r\n\r\n        }, { \"./lib/Dispatcher\": 2 }], 2: [function (require, module, exports) {\r\n            /**\r\n             * Copyright (c) 2014, Facebook, Inc.\r\n             * All rights reserved.\r\n             *\r\n             * This source code is licensed under the BSD-style license found in the\r\n             * LICENSE file in the root directory of this source tree. An additional grant\r\n             * of patent rights can be found in the PATENTS file in the same directory.\r\n             *\r\n             * @providesModule Dispatcher\r\n             * @typechecks\r\n             * @preventMunge\r\n             */\r\n\r\n            \"use strict\";\r\n\r\n            var invariant = require('./invariant');\r\n\r\n            var _lastID = 1;\r\n            var _prefix = 'ID_';\r\n\r\n            /**\r\n             * Dispatcher is used to broadcast payloads to registered callbacks. This is\r\n             * different from generic pub-sub systems in two ways:\r\n             *\r\n             *   1) Callbacks are not subscribed to particular events. Every payload is\r\n             *      dispatched to every registered callback.\r\n             *   2) Callbacks can be deferred in whole or part until other callbacks have\r\n             *      been executed.\r\n             *\r\n             * For example, consider this hypothetical flight destination form, which\r\n             * selects a default city when a country is selected:\r\n             *\r\n             *   var flightDispatcher = new Dispatcher();\r\n             *\r\n             *   // Keeps track of which country is selected\r\n             *   var CountryStore = {country: null};\r\n             *\r\n             *   // Keeps track of which city is selected\r\n             *   var CityStore = {city: null};\r\n             *\r\n             *   // Keeps track of the base flight price of the selected city\r\n             *   var FlightPriceStore = {price: null}\r\n             *\r\n             * When a user changes the selected city, we dispatch the payload:\r\n             *\r\n             *   flightDispatcher.dispatch({\r\n             *     actionType: 'city-update',\r\n             *     selectedCity: 'paris'\r\n             *   });\r\n             *\r\n             * This payload is digested by `CityStore`:\r\n             *\r\n             *   flightDispatcher.register(function(payload) {\r\n             *     if (payload.actionType === 'city-update') {\r\n             *       CityStore.city = payload.selectedCity;\r\n             *     }\r\n             *   });\r\n             *\r\n             * When the user selects a country, we dispatch the payload:\r\n             *\r\n             *   flightDispatcher.dispatch({\r\n             *     actionType: 'country-update',\r\n             *     selectedCountry: 'australia'\r\n             *   });\r\n             *\r\n             * This payload is digested by both stores:\r\n             *\r\n             *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n             *     if (payload.actionType === 'country-update') {\r\n             *       CountryStore.country = payload.selectedCountry;\r\n             *     }\r\n             *   });\r\n             *\r\n             * When the callback to update `CountryStore` is registered, we save a reference\r\n             * to the returned token. Using this token with `waitFor()`, we can guarantee\r\n             * that `CountryStore` is updated before the callback that updates `CityStore`\r\n             * needs to query its data.\r\n             *\r\n             *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n             *     if (payload.actionType === 'country-update') {\r\n             *       // `CountryStore.country` may not be updated.\r\n             *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\r\n             *       // `CountryStore.country` is now guaranteed to be updated.\r\n             *\r\n             *       // Select the default city for the new country\r\n             *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\r\n             *     }\r\n             *   });\r\n             *\r\n             * The usage of `waitFor()` can be chained, for example:\r\n             *\r\n             *   FlightPriceStore.dispatchToken =\r\n             *     flightDispatcher.register(function(payload) {\r\n             *       switch (payload.actionType) {\r\n             *         case 'country-update':\r\n             *         case 'city-update':\r\n             *           flightDispatcher.waitFor([CityStore.dispatchToken]);\r\n             *           FlightPriceStore.price =\r\n             *             getFlightPriceStore(CountryStore.country, CityStore.city);\r\n             *           break;\r\n             *     }\r\n             *   });\r\n             *\r\n             * The `country-update` payload will be guaranteed to invoke the stores'\r\n             * registered callbacks in order: `CountryStore`, `CityStore`, then\r\n             * `FlightPriceStore`.\r\n             */\r\n\r\n            function Dispatcher() {\r\n                this._callbacks = {};\r\n                this._isPending = {};\r\n                this._isHandled = {};\r\n                this._isDispatching = false;\r\n                this._pendingPayload = null;\r\n            }\r\n\r\n            /**\r\n             * Registers a callback to be invoked with every dispatched payload. Returns\r\n             * a token that can be used with `waitFor()`.\r\n             *\r\n             * @param {function} callback\r\n             * @return {string}\r\n             */\r\n            Dispatcher.prototype.register = function (callback) {\r\n                var id = _prefix + _lastID++;\r\n                this._callbacks[id] = callback;\r\n                return id;\r\n            };\r\n\r\n            /**\r\n             * Removes a callback based on its token.\r\n             *\r\n             * @param {string} id\r\n             */\r\n            Dispatcher.prototype.unregister = function (id) {\r\n                invariant(\r\n                  this._callbacks[id],\r\n                  'Dispatcher.unregister(...): `%s` does not map to a registered callback.',\r\n                  id\r\n                );\r\n                delete this._callbacks[id];\r\n            };\r\n\r\n            /**\r\n             * Waits for the callbacks specified to be invoked before continuing execution\r\n             * of the current callback. This method should only be used by a callback in\r\n             * response to a dispatched payload.\r\n             *\r\n             * @param {array<string>} ids\r\n             */\r\n            Dispatcher.prototype.waitFor = function (ids) {\r\n                invariant(\r\n                  this._isDispatching,\r\n                  'Dispatcher.waitFor(...): Must be invoked while dispatching.'\r\n                );\r\n                for (var ii = 0; ii < ids.length; ii++) {\r\n                    var id = ids[ii];\r\n                    if (this._isPending[id]) {\r\n                        invariant(\r\n                          this._isHandled[id],\r\n                          'Dispatcher.waitFor(...): Circular dependency detected while ' +\r\n                          'waiting for `%s`.',\r\n                          id\r\n                        );\r\n                        continue;\r\n                    }\r\n                    invariant(\r\n                      this._callbacks[id],\r\n                      'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',\r\n                      id\r\n                    );\r\n                    this._invokeCallback(id);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Dispatches a payload to all registered callbacks.\r\n             *\r\n             * @param {object} payload\r\n             */\r\n            Dispatcher.prototype.dispatch = function (payload) {\r\n                invariant(\r\n                  !this._isDispatching,\r\n                  'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'\r\n                );\r\n                this._startDispatching(payload);\r\n                try {\r\n                    for (var id in this._callbacks) {\r\n                        if (this._isPending[id]) {\r\n                            continue;\r\n                        }\r\n                        this._invokeCallback(id);\r\n                    }\r\n                } finally {\r\n                    this._stopDispatching();\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Is this Dispatcher currently dispatching.\r\n             *\r\n             * @return {boolean}\r\n             */\r\n            Dispatcher.prototype.isDispatching = function () {\r\n                return this._isDispatching;\r\n            };\r\n\r\n            /**\r\n             * Call the callback stored with the given id. Also do some internal\r\n             * bookkeeping.\r\n             *\r\n             * @param {string} id\r\n             * @internal\r\n             */\r\n            Dispatcher.prototype._invokeCallback = function (id) {\r\n                this._isPending[id] = true;\r\n                this._callbacks[id](this._pendingPayload);\r\n                this._isHandled[id] = true;\r\n            };\r\n\r\n            /**\r\n             * Set up bookkeeping needed when dispatching.\r\n             *\r\n             * @param {object} payload\r\n             * @internal\r\n             */\r\n            Dispatcher.prototype._startDispatching = function (payload) {\r\n                for (var id in this._callbacks) {\r\n                    this._isPending[id] = false;\r\n                    this._isHandled[id] = false;\r\n                }\r\n                this._pendingPayload = payload;\r\n                this._isDispatching = true;\r\n            };\r\n\r\n            /**\r\n             * Clear bookkeeping used for dispatching.\r\n             *\r\n             * @internal\r\n             */\r\n            Dispatcher.prototype._stopDispatching = function () {\r\n                this._pendingPayload = null;\r\n                this._isDispatching = false;\r\n            };\r\n\r\n\r\n            module.exports = Dispatcher;\r\n\r\n        }, { \"./invariant\": 3 }], 3: [function (require, module, exports) {\r\n            /**\r\n             * Copyright (c) 2014, Facebook, Inc.\r\n             * All rights reserved.\r\n             *\r\n             * This source code is licensed under the BSD-style license found in the\r\n             * LICENSE file in the root directory of this source tree. An additional grant\r\n             * of patent rights can be found in the PATENTS file in the same directory.\r\n             *\r\n             * @providesModule invariant\r\n             */\r\n\r\n            \"use strict\";\r\n\r\n            /**\r\n             * Use invariant() to assert state which your program assumes to be true.\r\n             *\r\n             * Provide sprintf-style format (only %s is supported) and arguments\r\n             * to provide information about what broke and what you were\r\n             * expecting.\r\n             *\r\n             * The invariant message will be stripped in production, but the invariant\r\n             * will remain to ensure logic does not differ in production.\r\n             */\r\n\r\n            var invariant = function (condition, format, a, b, c, d, e, f) {\r\n                if (false) {\r\n                    if (format === undefined) {\r\n                        throw new Error('invariant requires an error message argument');\r\n                    }\r\n                }\r\n\r\n                if (!condition) {\r\n                    var error;\r\n                    if (format === undefined) {\r\n                        error = new Error(\r\n                          'Minified exception occurred; use the non-minified dev environment ' +\r\n                          'for the full error message and additional helpful warnings.'\r\n                        );\r\n                    } else {\r\n                        var args = [a, b, c, d, e, f];\r\n                        var argIndex = 0;\r\n                        error = new Error(\r\n                          'Invariant Violation: ' +\r\n                          format.replace(/%s/g, function () { return args[argIndex++]; })\r\n                        );\r\n                    }\r\n\r\n                    error.framesToPop = 1; // we don't care about invariant's own frame\r\n                    throw error;\r\n                }\r\n            };\r\n\r\n            module.exports = invariant;\r\n\r\n        }, {}]\r\n    }, {}, [1])(1)\r\n});\n","// Universal Module Definition - http://git.io/xPWm\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('secure/AppDispatcher',['libs/flux'], factory);\r\n    } else {\r\n        root.AppDispatcher = factory(root.Flux);\r\n    }\r\n}(this, function (Flux) {\r\n    var AppDispatcher = new Flux.Dispatcher();\r\n\r\n    AppDispatcher.handleViewAction = function (action) {\r\n        this.dispatch({\r\n            source: 'VIEW_ACTION',\r\n            action: action\r\n        });\r\n    }\r\n    return AppDispatcher;\r\n}));\n","// ReSharper disable InconsistentNaming\r\n// Universal Module Definition - http://git.io/xPWm\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('core/global/form-actions',['secure/AppDispatcher'], factory);\r\n    } else {\r\n        root.FormStore = factory(root.EventEmitter, root.AppDispatcher);\r\n    }\r\n}(this, function (AppDispatcher) {\r\n\r\n    var FormActions = {\r\n\r\n        /**\r\n     * @param  {string} text\r\n     */\r\n        validate: function() {\r\n            AppDispatcher.handleViewAction({\r\n                actionType: 'validate'\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    return FormActions;\r\n}));\n"]}